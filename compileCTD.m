addpath Modules

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% STATIC DEFINITIONS: (pre-2025 these used to be hard coded below with a new 'compileCTD' 
% script copy created for each cruise; now they come from the GUI coded in 'guiCTD.m')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
BASEPATH = PARAMS.indir; %'~/projects/CTD/';
outFILE = PARAMS.outafname; %'SKQ202513S.ascii';
hdrFILE = PARAMS.outhfname; %'SKQ202513S.hdr';
INSTRUMENT = PARAMS.instrument; %'SBE9';
VESSEL = PARAMS.vess; %'R/V Sikuliaq';
CRUISE = PARAMS.cruise; %'SKQ202513S';
PI = PARAMS.pi; %'Danielson';
PROJECT = PARAMS.project; %'NGA LTER/Seward Line';
AGENCY = PARAMS.agency; %'NSF/EVOSTC/NPRB';
REGION = PARAMS.region; %'Gulf of Alaska';
DATARESTRICTIONS = PARAMS.datares; %'n';
TIMEOFFSET = PARAMS.timeoff; %0/24; % employ to convert to GMT if needed
year = PARAMS.year;
DEPLAT = PARAMS.depLat;
CTDvariables  = strvcat('Temperature [ITS-90, deg C]',...% unique variable names found in CNV file header: these are the columns to plot for upcast/downcast selection
                        'Salinity ',...
                        'sigma-é00: Density [sigma-theta, kg/m^3]');
                        %'Density [sigma-t, kg/m^3 ]'); 
if PARAMS.SSsel == 1
    SELECTsensors = strvcat('Temperature [ITS-90, deg C]',...% unique variable names found in CNV file header: these are the columns to plot in plotSELECTsensors routine
                             'Salinity ',...
                             'sigma-é00: Density [sigma-theta, kg/m^3]',...
                             'Fluorescence, WET Labs ECO-AFL/FL [mg/m^3]',...
                             'PAR/Irradiance',...
                             'Altimeter [m]'); 
                             %'Density [sigma-t, Kg/m^3 ]',...
                             %'Fluorescence, Seapoint',...
elseif PARAMS.SSsel == 2
    SELECTsensors = strvcat('v0: Voltage 0',...
                            'v1: Voltage 1',...
                            'v2: Voltage 2',...
                            'v3: Voltage 3',...
                            'v4: Voltage 4',...
                            'v5: Voltage 5',...
                            'v6: Voltage 6',...
                            'v7: Voltage 7');
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OPTIONS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
promptFORupcastDOWNCAST = PARAMS.updown; %0; % set to 1 to have manual selection of upcast/downcast
EXCLUDEcolumns = PARAMS.excluDat; %[]; % list of columns to exclude from CNV file (if any)
CTDinterpolate = PARAMS.interp; %1; % set to 1 to interpolate file after initial plot
extrapolateFROM = PARAMS.extrap; %0; % set to 0 to just extrapolate across missing bins. Or set to pressure level bin for all casts to be treated equally.
printEPS = PARAMS.eps; %0; % set to 1 to send output to files
printPNG = PARAMS.png; %0; % set to 1 to send output to files
maxPRESSURE = PARAMS.maxPRESSURE;%1000; % % maximum pressure of plots
compileBOTTLES = PARAMS.compbot; %1; % set to 1 to make a bottle summary file, 0 to not.
UPdown = PARAMS.pltDat; %2;  % set to 1 to plot the downcast, 0 to take the upcast, 2 to plot both
nROW = PARAMS.nROW;%1; % number of subplot rows 
nCOL = PARAMS.nCOL;%3; % number of subplot columns 
compileCNVs = PARAMS.compcnv; %1; % run this loop to choose upcast/downcast and combine into one file
plotSELECTsensors = PARAMS.pltsel; %0; % run this loop to plot out all profiles selected in SELECTsensors
maxPRESSURE_SS = PARAMS.maxPRESSURE_SS; %300; 
UPdown_SS = PARAMS.UPdown_SS;  %0; % set to 1 to take the downcast, 0 to take the upcast.
nCOL_SS = PARAMS.nCOL_SS; %4; % number of columns to print
nROW_SS = PARAMS.nROW_SS; %2; % number of data rows to print
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% VARIABLE NAME AND FORMAT DEFINITIONS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NOTE: For all variables within the CNV file, all NAMES and FORMATS 
% must be listed below. Order of appearance is not important.
%....NAME ..................................................FORMAT....
VARIABLEnameFORMAT = [ '' ...
'Consecutive Station Number                                   %4i   ';...
append('depSM: Depth [salt water, m], lat = ',DEPLAT,'                    %9.3f ');...
'prDM: Pressure, Digiquartz [db]                              %9.3f ';...
'prdM: Pressure, Strain Gauge [db]                            %9.3f ';...
'prSM: Pressure, Strain Gauge [db]                            %9.3f ';...
't090C: Temperature [ITS-90, deg C]                           %8.4f ';...
'tv290C: Temperature [ITS-90, deg C]                          %8.4f ';...
't190C: Temperature, 2 [ITS-90, deg C]                        %8.4f ';...
'c0S/m: Conductivity [S/m]                                    %9.6f ';...
'c1S/m: Conductivity, 2 [S/m]                                 %9.6f ';...
'sigma-t00: Density [sigma-t, Kg/m^3 ]                        %8.4f ';...
'sigma-t00: Density [sigma-t, kg/m^3 ]                        %8.4f ';...
'sigma-t11: Density, 2 [sigma-t, Kg/m^3 ]                     %8.4f ';...
'sigma-t11: Density, 2 [sigma-t, kg/m^3 ]                     %8.4f ';...
'sigma-é00: Density [sigma-theta, kg/m^3]                     %8.4f ';...
'sigma-é11: Density, 2 [sigma-theta, kg/m^3]                  %8.4f ';...
'potemp090C: Potential Temperature [ITS-90, deg C]            %8.4f ';...
'potemp190C: Potential Temperature, 2 [ITS-90, deg C]         %8.4f ';...
'D2-D1,t: Density Difference, 2 - 1 [sigma-t, Kg/m^3 ]        %8.4f ';...
'sal00: Salinity [PSU]                                        %8.4f ';...
'sal11: Salinity, 2 [PSU]                                     %8.4f ';...
'sal00: Salinity, Practical [PSU]                             %8.4f ';...
'sal11: Salinity, Practical, 2 [PSU]                          %8.4f ';...
'sbeox0ML/L: Oxygen, SBE 43 [ml/l]                            %9.5f ';...
'flECO-AFL: Fluorescence, Wetlab ECO-AFL/FL [mg/m^3]          %8.4f ';...
'wetStar: Fluorescence, Wetlab Wetstar [mg/m^3]               %8.4f ';...
'wl0: RS-232 WET Labs raw counts 0                            %8.4f ';...
'wetCDOM: Fluorescence, WET Labs CDOM [mg/m^3]                %8.4f ';...
'turbWETbb0: Turbidity, WET Labs ECO BB [m^-1/sr]             %8.4f ';...
'flECO-AFL: Fluorescence, WET Labs ECO-AFL/FL [mg/m^3]        %8.4f ';...
'upoly0: Upoly 0, turner cyclops fluorometer                  %8.4f ';... 
'upoly0: Upoly 0, SUNA                                        %8.4f ';... 
'upoly1: Upoly 1, LISST-DEEP                                  %8.4f ';... 
'flSP: Fluorescence, Seapoint                                 %8.4f ';...
'svCM: Sound Velocity [Chen-Millero, m/s]                     %8.4f ';...
'par: PAR/Irradiance, Biospherical/Licor                      %9.3f ';...
'par/log: PAR/Logarithmic, Satlantic [umol photons/m2/s]      %9.3f ';...
'bat: Beam Attenuation, Chelsea/Seatech/Wetlab CStar [1/m]    %9.3f ';...
'CStarAt0: Beam Attenuation, WET Labs C-Star [1/m]            %9.3f ';...
'xmiss: Beam Transmission, Chelsea/Seatech/Wetlab CStar [%]   %9.3f ';...
'xmiss: Beam Transmission, Chelsea/Seatech/WET Labs CStar [%] %9.3f ';...
'CStarTr0: Beam Transmission, WET Labs C-Star [%]             %8.4f ';...
'obs: OBS, Backscatterance (D & A) [NTU]                      %9.3f ';...
'sbeox0V: Oxygen Voltage, SBE 43                              %9.3f ';...
'sbox0Mm/Kg: Oxygen, SBE 43 [umol/kg]                         %9.3f ';...
'sbox1Mm/Kg: Oxygen, SBE 43, 2 [umol/kg]                      %9.3f ';...
'sbeox0PS: Oxygen, SBE 43 [% saturation]                      %9.3f ';...
'sbeox1PS: Oxygen, SBE 43, 2 [% saturation]                   %9.3f ';...
'spar: SPAR/Surface Irradiance                                %9.3f ';...
'altM: Altimeter [m]                                          %8.3f ';...
'latitude: Latitude [deg]                                     %11.5f';...
'longitude: Longitude [deg]                                   %11.5f';...
'timeJ: Julian Days                                           %10.6f';...
'pumps: Pump Status                                           %2i   ';...
'nbf: Bottles Fired                                           %2i   ';...
'nbin: number of scans per bin                                %4i   ';...
'scan: Scan Count                                             %7i   ';...
'flag: flag                                                   %8.4f ';...
'dz/dtM: Descent Rate [m/s]                                   %6.3f ';...
'accM: Acceleration [m/s^2]                                   %6.3f ';...
'v0: Voltage 0                                                %8.4f ';...
'v1: Voltage 1                                                %8.4f ';...
'v2: Voltage 2                                                %8.4f ';...
'v3: Voltage 3                                                %8.4f ';...
'v4: Voltage 4                                                %8.4f ';...
'v5: Voltage 5                                                %8.4f ';...
'v6: Voltage 6                                                %8.4f ';...
'v7: Voltage 7                                                %8.4f ';...
];

%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% VARIABLE NAME AND CSV HEADER DEFINITIONS:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NOTE: For all variables within the CNV file, all NAMES and CSV HEADERS
% must be listed below. Order of appearance is not important.
%....NAME ...................................................CSV HEADER....


PARAMS.VARIABLEnameFORMATheader = [ '' ...
'Consecutive Station Number                                   Cast_Number                      ';...
append('depSM: Depth [salt water, m], lat = ',DEPLAT,'                    Depth_[m]                        ');...                       ';...
'prDM: Pressure, Digiquartz [db]                              Pressure_[dbar]                  ';...
'prdM: Pressure, Strain Gauge [db]                            Pressure_[dbar]                  ';...
'prSM: Pressure, Strain Gauge [db]                            Pressure_[dbar]                  ';...
't090C: Temperature [ITS-90, deg C]                           Temperature_[C]                  ';...
'tv290C: Temperature [ITS-90, deg C]                          Temperature_[C]                  ';...
't190C: Temperature, 2 [ITS-90, deg C]                        Temperature2_[C]                 ';...
'c0S/m: Conductivity [S/m]                                    Conductivity_[S/m]               ';...
'c1S/m: Conductivity, 2 [S/m]                                 Conductivity2_[S/m]              ';...
'sigma-t00: Density [sigma-t, Kg/m^3 ]                        Density_[kg/m3_sigmat]           ';...
'sigma-t00: Density [sigma-t, kg/m^3 ]                        Density_[kg/m3_sigmat]           ';...
'sigma-t11: Density, 2 [sigma-t, Kg/m^3 ]                     Density2_[kg/m3_sigmat]          ';...
'sigma-t11: Density, 2 [sigma-t, kg/m^3 ]                     Density2_[kg/m3_sigmat]          ';...
'sigma-é00: Density [sigma-theta, kg/m^3]                     Density_[kg/m3_sigmatheta]       ';...
'sigma-é11: Density, 2 [sigma-theta, kg/m^3]                  Density2_[kg/m3_sigmatheta]      ';...
'potemp090C: Potential Temperature [ITS-90, deg C]            PotentialTemperature_[C]         ';...
'potemp190C: Potential Temperature, 2 [ITS-90, deg C]         PotentialTemperature2_[C]        ';...
'D2-D1,t: Density Difference, 2 - 1 [sigma-t, Kg/m^3 ]                                         ';...
'sal00: Salinity [PSU]                                        Salinity_[psu]                   ';...
'sal11: Salinity, 2 [PSU]                                     Salinity2_[psu]                  ';...
'sal00: Salinity, Practical [PSU]                             Salinity_[psu]                   ';...
'sal11: Salinity, Practical, 2 [PSU]                          Salinity2_[psu]                  ';...
'sbeox0ML/L: Oxygen, SBE 43 [ml/l]                                                             ';...
'flECO-AFL: Fluorescence, Wetlab ECO-AFL/FL [mg/m^3]          Fluorescence_[mg/m3]             ';...
'wetStar: Fluorescence, Wetlab Wetstar [mg/m^3]               Fluorescence_[mg/m3]             ';...
'wl0: RS-232 WET Labs raw counts 0                                                             ';...
'wetCDOM: Fluorescence, WET Labs CDOM [mg/m^3]                Fluorescence_[mg/m3]             ';...
'turbWETbb0: Turbidity, WET Labs ECO BB [m^-1/sr]                                              ';...
'flECO-AFL: Fluorescence, WET Labs ECO-AFL/FL [mg/m^3]        Fluorescence_[mg/m3]             ';...
'upoly0: Upoly 0, turner cyclops fluorometer                                                   ';... 
'upoly0: Upoly 0, SUNA                                        SUNA                             ';... 
'upoly1: Upoly 1, LISST-DEEP                                  LISST                            ';... 
'flSP: Fluorescence, Seapoint                                                                  ';...
'svCM: Sound Velocity [Chen-Millero, m/s]                                                      ';...
'par: PAR/Irradiance, Biospherical/Licor                      PAR_[umol_photons/m2/sec]        ';...
'par/log: PAR/Logarithmic, Satlantic [umol photons/m2/s]      PAR_[umol_photons/m2/sec]        ';...
'bat: Beam Attenuation, Chelsea/Seatech/Wetlab CStar [1/m]    BeamAttenuation_[1/m]            ';...
'CStarAt0: Beam Attenuation, WET Labs C-Star [1/m]            BeamAttenuation_[1/m]            ';...
'xmiss: Beam Transmission, Chelsea/Seatech/Wetlab CStar [%]   BeamTransmission_[%]             ';...
'xmiss: Beam Transmission, Chelsea/Seatech/WET Labs CStar [%] BeamTransmission_[%]             ';...
'CStarTr0: Beam Transmission, WET Labs C-Star [%]             BeamTransmission_[%]             ';...
'obs: OBS, Backscatterance (D & A) [NTU]                                                       ';...
'sbeox0V: Oxygen Voltage, SBE 43                                                               ';...
'sbox0Mm/Kg: Oxygen, SBE 43 [umol/kg]                         Oxygen_[umol/kg]                 ';...
'sbox1Mm/Kg: Oxygen, SBE 43, 2 [umol/kg]                      Oxygen2_[umol/kg]                ';...
'sbeox0PS: Oxygen, SBE 43 [% saturation]                      OxygenPS_[%_saturation]          ';...
'sbeox1PS: Oxygen, SBE 43, 2 [% saturation]                   OxygenPS2_[%_saturation]         ';...
'spar: SPAR/Surface Irradiance                                                                 ';...
'altM: Altimeter [m]                                          Altimeter_[m]                    ';...
'latitude: Latitude [deg]                                     Latitude_[decimal_degrees_north] ';...
'longitude: Longitude [deg]                                   Longitude_[decimal_degrees_east] ';...
'timeJ: Julian Days                                           JulianDays_[days]                ';...
'pumps: Pump Status                                                                            ';...
'nbf: Bottles Fired                                                                            ';...
'nbin: number of scans per bin                                NBin_[scans/bin]                 ';...
'scan: Scan Count                                                                              ';...
'flag: flag                                                   flag                             ';...
'dz/dtM: Descent Rate [m/s]                                                                    ';...
'accM: Acceleration [m/s^2]                                                                    ';...
'v0: Voltage 0                                                Voltage0_[V]                     ';...
'v1: Voltage 1                                                Voltage1_[V]                     ';...
'v2: Voltage 2                                                Voltage2_[V]                     ';...
'v3: Voltage 3                                                Voltage3_[V]                     ';...
'v4: Voltage 4                                                Voltage4_[V]                     ';...
'v5: Voltage 5                                                Voltage5_[V]                     ';...
'v6: Voltage 6                                                Voltage6_[V]                     ';...
'v7: Voltage 7                                                Voltage7_[V]                     ';...
];


if plotSELECTsensors, % run this loop to plot out all profiles selected in 
    plotCTDprofiles(SELECTsensors,maxPRESSURE_SS,UPdown_SS,nCOL_SS,nROW_SS);
end
if compileBOTTLES,
    compile_ctd_BOTTLE(CRUISE);
end


if compileCNVs,
close all
[mANC,nANC] = size(CTDvariables); % # of variables
a = dir([PARAMS.indir '\CNVfiles\*.cnv']); % find all .cnv files in the subdirectory CNVfiles

for INfile = 1:length(a) % loop through each file
    FILEtitle = a(INfile).name; % name of the file to work on
    w = findstr(FILEtitle,'_'); % find _'s
    if ~isempty(w), % if any _'s found, replace with -'s
        FILEtitle(w) = '-';
    end
    [H,D] = sbehead([BASEPATH '/CNVfiles/' a(INfile).name]); % read in header (H) and data (D) from .cnv file
    [m,n] = size(H); % size of header data matrix
        Y1 = [];
        nNAME = 0;
        lat = 0;
        lon = 0;
        gmttime = 0;
        depth = 0;
        stnname = 0;
        observer = 0;
        COLUMNnames = 'Consecutive Station Number';
    for XY = 1:m % loop through header rows
        if findstr(H(XY,:),'# name '), % look for the column defining rows that start with "# name"
            nNAME = nNAME + 1; % number of columns in datafile
            w = findstr(H(XY,:),' ');
            if findstr(H(XY,:),'Pressure'), % look for the Pressure row
                Y1 = str2num(H(XY,w(2):w(3)))+1; % the column of the Pressure data
                Y1L = deblank(H(XY,w(5):end)); % the label of the Pressure data
            end
            for XY2 = 1:mANC, % look for the CTDvariables variables
                if findstr(H(XY,:),deblank(CTDvariables(XY2,:))); % if CTDvariables variable XY2 is found in row XY of header H,
                    eval(['X' num2str(XY2) ' = str2num(H(XY,w(2):w(3)))+1;']); % find the column that the data sits in
                    eval(['X' num2str(XY2) 'L = deblank(H(XY,w(5):end));']); % find the label to use for the data
                end
            end
            eqs = findstr(H(XY,:),'=');
            
            %COLUMNnames = char(COLUMNnames,[strtrim(H(XY,eqs+1:end))]);
            %above doesn't work with new versions of matlab because eqs is
            %sometimes a vector and not a scalar which then throws an
            %operand error
            COLUMNnames = char(COLUMNnames,strtrim(H(XY,(eqs(1)+1):end)));
        end
        line1 = deblank(H(XY,:));
        
        if findstr(line1,'NMEA Latitude'), lat = 1; LAT = [ num2str(str2num(line1(19:20)) + str2num(line1(21:length(line1)-2))/60) ]; end
       	if findstr(line1,'NMEA Longitude'), lon = 1; LON = [ num2str(-str2num(line1(20:22)) - str2num(line1(23:length(line1)-2))/60) ]; end
       	if findstr(line1,'NMEA UTC (Time)'), gmttime = 1; GMTDATETIME = [line1(20:length(line1)) ]; end
        if findstr(line1,'** Latitude:') & lat == 0, lat = 1; LAT = strtrim(line1(14:end));end
        if findstr(line1,'** Latitude') & lat == 0, lat = 1; LAT = strtrim(line1(13:end));end
        if findstr(line1,'** Longitude:') & lon == 0, lon = 1; LON = strtrim(line1(15:end));end
        if findstr(line1,'** Longitude') & lon == 0, lon = 1; LON = strtrim(line1(14:end));end
        if findstr(line1,'** Station ID:'), stnname = 1; STNNAME = strtrim(line1(15:end)); end
        if findstr(line1,'** Station:'), stnname = 1; STNNAME = strtrim(line1(12:end)); end
        if findstr(line1,'** Station'), stnname = 1; STNNAME = strtrim(line1(11:end)); end
        if findstr(line1,'** Station Name:'), stnname = 1; STNNAME = strtrim(line1(17:end)); end
        if findstr(line1,'** Operator:'), observer = 1; OBSERVER = strtrim(line1(13:end)); end
        if findstr(line1,'** Operator'), observer = 1; OBSERVER = strtrim(line1(12:end)); end
        if findstr(line1,'** Water Depth:'), depth = 1;  DEPTH = str2num(line1(16:end)); end
        if findstr(line1,'** Bottom Depth'), depth = 1;  DEPTH = str2num(line1(16:end)); end
        if findstr(line1,'** Bottom Depth [m]:'), depth = 1;  DEPTH = str2num(line1(21:end)); end
        if findstr(line1,'** Depth:'), depth = 1;  DEPTH = str2num(line1(10:end)); end
        %if findstr(line1,PARAMS.botFor), depth = 1;  DEPTH = str2num(line1(length(PARAMS.botFor)+4:end)); end
        if findstr(line1,'# start_time ') & ~gmttime, gmttime = 1; ws = findstr(line1,' '); GMTDATETIME = datestr(datenum(line1(ws(3):end))+TIMEOFFSET,31); end
    end
        if ~lon, LON = '-999.999999'; end
        if ~lat, LAT = '99.999999'; end
        if ~gmttime, GMTDATETIME = 'MMM DD YYYY HH:MM:SS'; end
        if ~depth, DEPTH = NaN; end
%        if ~stnname, wu = findstr(FILEtitle,'-'); STNNAME = upper(FILEtitle(wu(end)+1:end-4)); end
        if ~stnname, wu = findstr(FILEtitle,'-'); STNNAME = upper(FILEtitle(1:end-4)); end
        if ~observer, OBSERVER = 'NaN'; end
            
        w = find(D(:,Y1) == max(D(:,Y1))); % maximum Pressure in cast
        if UPdown == 1, % select the upcast or the downcast
            D = D(1:w,:);
        elseif UPdown == 0,
            D = D(end:-1:w,:);
            D = sortrows(D,Y1);
        end
        
        if max(D(:,Y1)) > maxPRESSURE, % retain only data less than or equal to the MAXPRESSURE specified above
            D = D(find(D(:,Y1) <= maxPRESSURE),:);
        end

       w = find(D(:,end) == -9.99e-29); % interpolate through depth levels with no good data based on FLAG column 
       if ~isempty(w),
          [m,n] = size(D);
          goodLEVELS = setxor(w,[1:m]);
          for LEV = 1:n
               D(:,LEV) = interp1(goodLEVELS,D(goodLEVELS,LEV),[1:m]');
          end
          D(w,end) = 2; % set flag to interpolated
       end
       
       wMAX = find(D(:,Y1) == max(D(:,Y1)));
        
        figure(1); clf % open figure and plot the data
        for XY2 = 1:mANC
            subplot(nROW,nCOL,XY2);
                eval(['V = X' num2str(XY2) ';']);
                eval(['VL = X' num2str(XY2) 'L;']);
                plot(D(1:wMAX,V),D(1:wMAX,Y1),'k-'); hold on
                plot(D(1:wMAX,V),D(1:wMAX,Y1),'r.');
                plot(D(wMAX:end,V),D(wMAX:end,Y1),'k-'); hold on
                plot(D(wMAX:end,V),D(wMAX:end,Y1),'b.');
                set(gca,'ydir','reverse','fontweight','bold','fontsize',8)
                ylabel('Pressure (db)','fontweight','bold','fontsize',8)
                xlabel(VL,'fontweight','bold','fontsize',8) % label the x-data
                grid on
                box on
        end
                
        st = suptitle([FILEtitle]); % label the page with the filename
        set(st,'fontweight','bold','fontsize',16)

        if printEPS, % print the figure to an EPS file and a PNG file
           eval(['print -depsc2 Plots/' FILEtitle(1:end-4) '_TS.eps'])
        end
        if printPNG, % print the figure to an EPS file and a PNG file
           eval(['print -dpng -r150 Plots/' FILEtitle(1:end-4) '_TS.png'])
        end
        
       if promptFORupcastDOWNCAST
           ud = input(['Keep Upcast (0, blue) or Downcast (1, red, default)? ']);
       else
           ud = 1;
       end
       
       if isempty(ud), ud = 1; end
       if ud,                           % select upcast or downcast
            D = [D(1:wMAX,:)]; 
        else
            D = [D(end:-1:wMAX,:)]; 
        end
         
       firstGOOD = D(1,Y1);          % constant extrapolation up to surface from first bin 
       if firstGOOD > 0,
       for inx = firstGOOD-1:-1:0,
           D = [D(1,:); D];
           D(1,Y1) = inx;
           D(1,end) = 1;          % set flag to extrapolated
       end
       end
      
   if extrapolateFROM > 0,
       for inx = extrapolateFROM:-1:1,            % constant extrapolation up to surface from specified level 
           D(inx,:) = D(extrapolateFROM+1,:);     % extrapolate
           D(inx,Y1) = inx-1;                     % reset depth level
           D(inx,end) = 1;                        % set flag to extrapolated
       end
   end
      
       [m,n] = size(D);
       SD = setdiff(1:n,EXCLUDEcolumns);
       D = D(:,SD);
       SD = [1 SD + 1]; % because we are adding a column of CSNs
       COLUMNnames = COLUMNnames(SD,:);
       
        CSN = str2num(FILEtitle(end-6:end-4));    % consecutive station number
       % CSN = str2num(FILEtitle(1:2));    % consecutive station number
       % CSN = INfile; % temporarily assign a consecutive station number
        D = [CSN*ones(size(D(:,1))) D];
        
        % Creating Array of Variable FORMATS for fprintf
        [m,n] = size(COLUMNnames);
        outfmt = '';
        warning('off','MATLAB:dispatcher:InexactCaseMatch')
        for in = 1:m,
            VARrow = strmatch(strtrim(COLUMNnames(in,:)), VARIABLEnameFORMAT);
            if ~isempty(VARrow),
                outfmt = [outfmt strtrim(VARIABLEnameFORMAT(VARrow,62:end)) ' '];  % change the 62 if the variable definition array got bigger
            else
                disp(['No corresponding column found for: ' strtrim(COLUMNnames(in,:))])
                keyboard
            end
        end
        outfmt = [outfmt(1:end-1) '\n'];
        PARAMS.outfmt = outfmt;

        % Creating Array of Variable CSV HEADERS for profile csv summary files
        outfmtH = '';
        warning('off','MATLAB:dispatcher:InexactCaseMatch')
        for in = 1:m,
            VARrow = strmatch(strtrim(COLUMNnames(in,:)), PARAMS.VARIABLEnameFORMATheader);
            if ~isempty(VARrow),
                outfmtH = [outfmtH strtrim(PARAMS.VARIABLEnameFORMATheader(VARrow,62:end)) ','];  % change the 62 if the variable definition array got bigger
            else
                disp(['No corresponding column found for: ' strtrim(COLUMNnames(in,:))])
                keyboard
            end
        end
        outfmtH = [outfmtH(1:end-1)];
        PARAMS.outfmtHead = outfmtH;

        if INfile == 1, 
            percents = '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%';
            fid = fopen([PARAMS.outdir '\' outFILE],'w');
            fid2 = fopen([PARAMS.outdir '\' hdrFILE],'w');
            TOPlines = strvcat(['% Data File Name: ' outFILE],['% Header Data File Name: ' hdrFILE],percents,'% Data File Column Contents:');
            fprintf(fid,'%s\n',percents);
            [m,n] = size(TOPlines);
            for XY = 1:m,
                fprintf(fid,'%s\n',[TOPlines(XY,:)]);
            end
            [m,n] = size(COLUMNnames);
            for XY = 1:m,
                fprintf(fid,'%s\n',['% ' num2str(XY) ': ' COLUMNnames(XY,:)]);
            end
            fprintf(fid,'%s\n',percents);
            fprintf(fid,'%s\n',['% Output format = ' outfmt]);
            if ~isempty(EXCLUDEcolumns), fprintf(fid,'%s\n',['% NOTE: Some columns have been removed from original CNV file output.']); end
            H = strvcat(percents,'% SeaBird CNV File Header: ',H);
            H = strvcat(percents,'NOTE: Primary Temperature, Salinity and Density Columns are inspected and edited as necessary to remove ',' spurious spikes and density inverstion. Secondary T, S and sigma-T columns have not been altered.',H);
            H = strvcat(percents,'Data Flag Definition:','0 = Data Untouched','1 = Data columns are extrapolated (typically at top or bottom of water column)','2 = Primary T and/or S data are interpolated (typically at mid-water column depth)',H);
            [m,n] = size(H);
            for XY = 1:m,
                fprintf(fid,'%s\n',['% ' H(XY,:)]);
            end
        else
            fid = fopen([PARAMS.outdir '\' outFILE],'a');            
            fid2 = fopen([PARAMS.outdir '\' hdrFILE],'a');
        end
        fprintf(fid,outfmt,D');
        fclose(fid);
        HDRSTRING1 = [num2str(CSN) ', ' upper(STNNAME)  ', ' GMTDATETIME ', ' LAT ', ' LON ', ' num2str(DEPTH) ', ' FILEtitle ', '];
        HDRSTRING2 = [INSTRUMENT ', ' VESSEL ', ' CRUISE ', ' OBSERVER ', ' PI ', ' PROJECT ', ' AGENCY ', ' REGION ', ' DATARESTRICTIONS];
        fprintf(fid2,'%s\n',[HDRSTRING1 HDRSTRING2]);
        fclose(fid2);
end
end

if CTDinterpolate,
    Interp_CTD(outFILE(1:end-6));
end
